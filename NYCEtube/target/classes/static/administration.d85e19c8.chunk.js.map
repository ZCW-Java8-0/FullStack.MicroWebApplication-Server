{"version":3,"file":"administration.d85e19c8.chunk.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1BA;AAEA;AAEA;AAEA;AAYA;;;;;;;;;;;;;;;;;;;AClBA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;;;;;;;;;;;;;;;;;;;;;ACrBA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAEA;AAGA;AAKA;AACA;;AAAA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;;AAEA;;AAGA;AACA;AAEA;AAOA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvJA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAOA;AAMA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;AAEA;AAEA;;AAEA;AAEA;;AAEA;AAEA;AACA;AACA;;AAEA;AAEA;;AAEA;AAEA;;AAEA;AAEA;AAGA;AAGA;AACA;AAIA;AACA;AACA;AAWA;AAEA;AAEA;AAGA;AAEA;AAGA;AACA;AAKA;AACA;AACA;AACA;;AAAA;AAEA;AACA;;AAAA;AAEA;AAOA;;AAAA;AAQA;AAEA;AACA;AAEA;AACA;AAcA;AAEA;;;;;;;;;;;;;;;;;;ACrNA;AACA;AACA;AACA","sources":["webpack://nyc-etube/./src/main/webapp/app/modules/administration/docs/docs.scss","webpack://nyc-etube/./src/main/webapp/app/modules/administration/docs/docs.scss?defe","webpack://nyc-etube/./src/main/webapp/app/modules/administration/docs/docs.tsx","webpack://nyc-etube/./src/main/webapp/app/modules/administration/index.tsx","webpack://nyc-etube/./src/main/webapp/app/modules/administration/user-management/index.tsx","webpack://nyc-etube/./src/main/webapp/app/modules/administration/user-management/user-management-delete-dialog.tsx","webpack://nyc-etube/./src/main/webapp/app/modules/administration/user-management/user-management-detail.tsx","webpack://nyc-etube/./src/main/webapp/app/modules/administration/user-management/user-management-update.tsx","webpack://nyc-etube/./src/main/webapp/app/modules/administration/user-management/user-management.tsx","webpack://nyc-etube/./src/main/webapp/app/shared/util/pagination.constants.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"iframe {\\n  background: white;\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/main/webapp/app/modules/administration/docs/docs.scss\"],\"names\":[],\"mappings\":\"AAAA;EACE,iBAAA;AACF\",\"sourcesContent\":[\"iframe {\\n  background: white;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/postcss-loader/dist/cjs.js!../../../../../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[1].use[3]!./docs.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/postcss-loader/dist/cjs.js!../../../../../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[1].use[3]!./docs.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","import './docs.scss';\n\nimport React from 'react';\n\nconst DocsPage = () => (\n  <div>\n    <iframe\n      src=\"../swagger-ui/index.html\"\n      width=\"100%\"\n      height=\"800\"\n      title=\"Swagger UI\"\n      seamless\n      style={{ border: 'none' }}\n      data-cy=\"swagger-frame\"\n    />\n  </div>\n);\n\nexport default DocsPage;\n","import React from 'react';\n\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\nimport UserManagement from './user-management';\nimport Docs from './docs/docs';\n\nconst Routes = ({ match }) => (\n  <div>\n    <ErrorBoundaryRoute path={`${match.url}/user-management`} component={UserManagement} />\n    <ErrorBoundaryRoute exact path={`${match.url}/docs`} component={Docs} />\n  </div>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { Switch } from 'react-router-dom';\n\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\nimport UserManagement from './user-management';\nimport UserManagementDetail from './user-management-detail';\nimport UserManagementUpdate from './user-management-update';\nimport UserManagementDeleteDialog from './user-management-delete-dialog';\n\nconst Routes = ({ match }) => (\n  <>\n    <Switch>\n      <ErrorBoundaryRoute exact path={`${match.url}/new`} component={UserManagementUpdate} />\n      <ErrorBoundaryRoute exact path={`${match.url}/:login/edit`} component={UserManagementUpdate} />\n      <ErrorBoundaryRoute exact path={`${match.url}/:login`} component={UserManagementDetail} />\n      <ErrorBoundaryRoute path={match.url} component={UserManagement} />\n    </Switch>\n    <ErrorBoundaryRoute path={`${match.url}/:login/delete`} component={UserManagementDeleteDialog} />\n  </>\n);\n\nexport default Routes;\n","import React, { useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { getUser, deleteUser } from './user-management.reducer';\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\n\nexport const UserManagementDeleteDialog = (props: RouteComponentProps<{ login: string }>) => {\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(getUser(props.match.params.login));\n  }, []);\n\n  const handleClose = event => {\n    event.stopPropagation();\n    props.history.push('/admin/user-management');\n  };\n\n  const user = useAppSelector(state => state.userManagement.user);\n\n  const confirmDelete = event => {\n    dispatch(deleteUser(user.login));\n    handleClose(event);\n  };\n\n  return (\n    <Modal isOpen toggle={handleClose}>\n      <ModalHeader toggle={handleClose}>Confirm delete operation</ModalHeader>\n      <ModalBody>Are you sure you want to delete this User?</ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={handleClose}>\n          <FontAwesomeIcon icon=\"ban\" />\n          &nbsp; Cancel\n        </Button>\n        <Button color=\"danger\" onClick={confirmDelete}>\n          <FontAwesomeIcon icon=\"trash\" />\n          &nbsp; Delete\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default UserManagementDeleteDialog;\n","import React, { useEffect } from 'react';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Row, Badge } from 'reactstrap';\nimport { TextFormat } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { APP_DATE_FORMAT } from 'app/config/constants';\n\nimport { getUser } from './user-management.reducer';\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\n\nexport const UserManagementDetail = (props: RouteComponentProps<{ login: string }>) => {\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(getUser(props.match.params.login));\n  }, []);\n\n  const user = useAppSelector(state => state.userManagement.user);\n\n  return (\n    <div>\n      <h2>\n        User [<strong>{user.login}</strong>]\n      </h2>\n      <Row size=\"md\">\n        <dl className=\"jh-entity-details\">\n          <dt>Login</dt>\n          <dd>\n            <span>{user.login}</span>&nbsp;\n            {user.activated ? <Badge color=\"success\">Activated</Badge> : <Badge color=\"danger\">Deactivated</Badge>}\n          </dd>\n          <dt>First Name</dt>\n          <dd>{user.firstName}</dd>\n          <dt>Last Name</dt>\n          <dd>{user.lastName}</dd>\n          <dt>Email</dt>\n          <dd>{user.email}</dd>\n          <dt>Created By</dt>\n          <dd>{user.createdBy}</dd>\n          <dt>Created Date</dt>\n          <dd>{user.createdDate ? <TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid /> : null}</dd>\n          <dt>Last Modified By</dt>\n          <dd>{user.lastModifiedBy}</dd>\n          <dt>Last Modified Date</dt>\n          <dd>\n            {user.lastModifiedDate ? (\n              <TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\n            ) : null}\n          </dd>\n          <dt>Profiles</dt>\n          <dd>\n            <ul className=\"list-unstyled\">\n              {user.authorities\n                ? user.authorities.map((authority, i) => (\n                    <li key={`user-auth-${i}`}>\n                      <Badge color=\"info\">{authority}</Badge>\n                    </li>\n                  ))\n                : null}\n            </ul>\n          </dd>\n        </dl>\n      </Row>\n      <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\n        <FontAwesomeIcon icon=\"arrow-left\" /> <span className=\"d-none d-md-inline\">Back</span>\n      </Button>\n    </div>\n  );\n};\n\nexport default UserManagementDetail;\n","import React, { useState, useEffect } from 'react';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Row, Col, FormText } from 'reactstrap';\nimport { ValidatedField, ValidatedForm, isEmail } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { getUser, getRoles, updateUser, createUser, reset } from './user-management.reducer';\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\n\nexport const UserManagementUpdate = (props: RouteComponentProps<{ login: string }>) => {\n  const [isNew] = useState(!props.match.params || !props.match.params.login);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (isNew) {\n      dispatch(reset());\n    } else {\n      dispatch(getUser(props.match.params.login));\n    }\n    dispatch(getRoles());\n    return () => {\n      dispatch(reset());\n    };\n  }, [props.match.params.login]);\n\n  const handleClose = () => {\n    props.history.push('/admin/user-management');\n  };\n\n  const saveUser = values => {\n    if (isNew) {\n      dispatch(createUser(values));\n    } else {\n      dispatch(updateUser(values));\n    }\n    handleClose();\n  };\n\n  const isInvalid = false;\n  const user = useAppSelector(state => state.userManagement.user);\n  const loading = useAppSelector(state => state.userManagement.loading);\n  const updating = useAppSelector(state => state.userManagement.updating);\n  const authorities = useAppSelector(state => state.userManagement.authorities);\n\n  return (\n    <div>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <h1>Create or edit a User</h1>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          {loading ? (\n            <p>Loading...</p>\n          ) : (\n            <ValidatedForm onSubmit={saveUser} defaultValues={user}>\n              {user.id ? <ValidatedField type=\"text\" name=\"id\" required readOnly label=\"ID\" validate={{ required: true }} /> : null}\n              <ValidatedField\n                type=\"text\"\n                name=\"login\"\n                label=\"Login\"\n                validate={{\n                  required: {\n                    value: true,\n                    message: 'Your username is required.',\n                  },\n                  pattern: {\n                    value: /^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$/,\n                    message: 'Your username is invalid.',\n                  },\n                  minLength: {\n                    value: 1,\n                    message: 'Your username is required to be at least 1 character.',\n                  },\n                  maxLength: {\n                    value: 50,\n                    message: 'Your username cannot be longer than 50 characters.',\n                  },\n                }}\n              />\n              <ValidatedField\n                type=\"text\"\n                name=\"firstName\"\n                label=\"First name\"\n                validate={{\n                  maxLength: {\n                    value: 50,\n                    message: 'This field cannot be longer than 50 characters.',\n                  },\n                }}\n              />\n              <ValidatedField\n                type=\"text\"\n                name=\"lastName\"\n                label=\"Last name\"\n                validate={{\n                  maxLength: {\n                    value: 50,\n                    message: 'This field cannot be longer than 50 characters.',\n                  },\n                }}\n              />\n              <FormText>This field cannot be longer than 50 characters.</FormText>\n              <ValidatedField\n                name=\"email\"\n                label=\"Email\"\n                placeholder={'Your email'}\n                type=\"email\"\n                validate={{\n                  required: {\n                    value: true,\n                    message: 'Your email is required.',\n                  },\n                  minLength: {\n                    value: 5,\n                    message: 'Your email is required to be at least 5 characters.',\n                  },\n                  maxLength: {\n                    value: 254,\n                    message: 'Your email cannot be longer than 50 characters.',\n                  },\n                  validate: v => isEmail(v) || 'Your email is invalid.',\n                }}\n              />\n              <ValidatedField type=\"checkbox\" name=\"activated\" check value={true} disabled={!user.id} label=\"Activated\" />\n              <ValidatedField type=\"select\" name=\"authorities\" multiple label=\"Profiles\">\n                {authorities.map(role => (\n                  <option value={role} key={role}>\n                    {role}\n                  </option>\n                ))}\n              </ValidatedField>\n              <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\n                <FontAwesomeIcon icon=\"arrow-left\" />\n                &nbsp;\n                <span className=\"d-none d-md-inline\">Back</span>\n              </Button>\n              &nbsp;\n              <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\n                <FontAwesomeIcon icon=\"save\" />\n                &nbsp; Save\n              </Button>\n            </ValidatedForm>\n          )}\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default UserManagementUpdate;\n","import React, { useState, useEffect } from 'react';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Table, Badge } from 'reactstrap';\nimport { TextFormat, JhiPagination, JhiItemCount, getSortState } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { APP_DATE_FORMAT } from 'app/config/constants';\nimport { ASC, DESC, ITEMS_PER_PAGE, SORT } from 'app/shared/util/pagination.constants';\nimport { overridePaginationStateWithQueryParams } from 'app/shared/util/entity-utils';\nimport { getUsersAsAdmin, updateUser } from './user-management.reducer';\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\n\nexport const UserManagement = (props: RouteComponentProps<any>) => {\n  const dispatch = useAppDispatch();\n\n  const [pagination, setPagination] = useState(\n    overridePaginationStateWithQueryParams(getSortState(props.location, ITEMS_PER_PAGE, 'id'), props.location.search)\n  );\n\n  const getUsersFromProps = () => {\n    dispatch(\n      getUsersAsAdmin({\n        page: pagination.activePage - 1,\n        size: pagination.itemsPerPage,\n        sort: `${pagination.sort},${pagination.order}`,\n      })\n    );\n    const endURL = `?page=${pagination.activePage}&sort=${pagination.sort},${pagination.order}`;\n    if (props.location.search !== endURL) {\n      props.history.push(`${props.location.pathname}${endURL}`);\n    }\n  };\n\n  useEffect(() => {\n    getUsersFromProps();\n  }, [pagination.activePage, pagination.order, pagination.sort]);\n\n  useEffect(() => {\n    const params = new URLSearchParams(props.location.search);\n    const page = params.get('page');\n    const sortParam = params.get(SORT);\n    if (page && sortParam) {\n      const sortSplit = sortParam.split(',');\n      setPagination({\n        ...pagination,\n        activePage: +page,\n        sort: sortSplit[0],\n        order: sortSplit[1],\n      });\n    }\n  }, [props.location.search]);\n\n  const sort = p => () =>\n    setPagination({\n      ...pagination,\n      order: pagination.order === ASC ? DESC : ASC,\n      sort: p,\n    });\n\n  const handlePagination = currentPage =>\n    setPagination({\n      ...pagination,\n      activePage: currentPage,\n    });\n\n  const handleSyncList = () => {\n    getUsersFromProps();\n  };\n\n  const toggleActive = user => () => {\n    dispatch(\n      updateUser({\n        ...user,\n        activated: !user.activated,\n      })\n    );\n  };\n\n  const { match } = props;\n  const account = useAppSelector(state => state.authentication.account);\n  const users = useAppSelector(state => state.userManagement.users);\n  const totalItems = useAppSelector(state => state.userManagement.totalItems);\n  const loading = useAppSelector(state => state.userManagement.loading);\n\n  return (\n    <div>\n      <h2 id=\"user-management-page-heading\" data-cy=\"userManagementPageHeading\">\n        Users\n        <div className=\"d-flex justify-content-end\">\n          <Button className=\"me-2\" color=\"info\" onClick={handleSyncList} disabled={loading}>\n            <FontAwesomeIcon icon=\"sync\" spin={loading} /> Refresh List\n          </Button>\n          <Link to={`${match.url}/new`} className=\"btn btn-primary jh-create-entity\">\n            <FontAwesomeIcon icon=\"plus\" /> Create a new user\n          </Link>\n        </div>\n      </h2>\n      <Table responsive striped>\n        <thead>\n          <tr>\n            <th className=\"hand\" onClick={sort('id')}>\n              ID\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th className=\"hand\" onClick={sort('login')}>\n              Login\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th className=\"hand\" onClick={sort('email')}>\n              Email\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th />\n            <th>Profiles</th>\n            <th className=\"hand\" onClick={sort('createdDate')}>\n              Created Date\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th className=\"hand\" onClick={sort('lastModifiedBy')}>\n              Last Modified By\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th id=\"modified-date-sort\" className=\"hand\" onClick={sort('lastModifiedDate')}>\n              Last Modified Date\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>\n          {users.map((user, i) => (\n            <tr id={user.login} key={`user-${i}`}>\n              <td>\n                <Button tag={Link} to={`${match.url}/${user.login}`} color=\"link\" size=\"sm\">\n                  {user.id}\n                </Button>\n              </td>\n              <td>{user.login}</td>\n              <td>{user.email}</td>\n              <td>\n                {user.activated ? (\n                  <Button color=\"success\" onClick={toggleActive(user)}>\n                    Activated\n                  </Button>\n                ) : (\n                  <Button color=\"danger\" onClick={toggleActive(user)}>\n                    Deactivated\n                  </Button>\n                )}\n              </td>\n              <td>\n                {user.authorities\n                  ? user.authorities.map((authority, j) => (\n                      <div key={`user-auth-${i}-${j}`}>\n                        <Badge color=\"info\">{authority}</Badge>\n                      </div>\n                    ))\n                  : null}\n              </td>\n              <td>\n                {user.createdDate ? <TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid /> : null}\n              </td>\n              <td>{user.lastModifiedBy}</td>\n              <td>\n                {user.lastModifiedDate ? (\n                  <TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\n                ) : null}\n              </td>\n              <td className=\"text-end\">\n                <div className=\"btn-group flex-btn-group-container\">\n                  <Button tag={Link} to={`${match.url}/${user.login}`} color=\"info\" size=\"sm\">\n                    <FontAwesomeIcon icon=\"eye\" /> <span className=\"d-none d-md-inline\">View</span>\n                  </Button>\n                  <Button tag={Link} to={`${match.url}/${user.login}/edit`} color=\"primary\" size=\"sm\">\n                    <FontAwesomeIcon icon=\"pencil-alt\" /> <span className=\"d-none d-md-inline\">Edit</span>\n                  </Button>\n                  <Button\n                    tag={Link}\n                    to={`${match.url}/${user.login}/delete`}\n                    color=\"danger\"\n                    size=\"sm\"\n                    disabled={account.login === user.login}\n                  >\n                    <FontAwesomeIcon icon=\"trash\" /> <span className=\"d-none d-md-inline\">Delete</span>\n                  </Button>\n                </div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n      {totalItems ? (\n        <div className={users?.length > 0 ? '' : 'd-none'}>\n          <div className=\"justify-content-center d-flex\">\n            <JhiItemCount page={pagination.activePage} total={totalItems} itemsPerPage={pagination.itemsPerPage} i18nEnabled />\n          </div>\n          <div className=\"justify-content-center d-flex\">\n            <JhiPagination\n              activePage={pagination.activePage}\n              onSelect={handlePagination}\n              maxButtons={5}\n              itemsPerPage={pagination.itemsPerPage}\n              totalItems={totalItems}\n            />\n          </div>\n        </div>\n      ) : (\n        ''\n      )}\n    </div>\n  );\n};\n\nexport default UserManagement;\n","export const ITEMS_PER_PAGE = 20;\nexport const ASC = 'asc';\nexport const DESC = 'desc';\nexport const SORT = 'sort';\n"],"names":[],"sourceRoot":""}